volumes:
  pg_data:
  back_static:
  back_media:

networks:
  default:
    driver: bridge
    name: foodgram_network

services:
  postgres:
    container_name: foodgram-psql
    image: postgres:17.2-alpine
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - default

  backend:
    container_name: foodgram-back
    image: python:3.13.2-alpine  # Save image, should be exact same as in Dockerfile.
    build: ../backend/
    env_file: .env
    environment:
      - IS_DOCKER=true  # Tell Django not to search for .env as it loaded by Docker.
    volumes:
      - ../backend/foodgram:/app/foodgram/ # Hot-reload.
      - back_static:/app/foodgram/static/  # Static files.
      - back_media:/app/foodgram/media/    # Media files.
    depends_on:
      - postgres
    networks:
      - default

  frontend:
    container_name: foodgram-front
    image: node:21.7.1-alpine  # Same idea as in backend.
    build: ../frontend/
    volumes:
      - ../frontend/:/app/result_build/

  nginx:
    container_name: foodgram-proxy
    image: nginx:1.25.4-alpine
    env_file: .env
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf                    # Main config.
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf  # Host config.
      - ../frontend/build:/usr/share/nginx/html/                    # Front static.
      - ../docs/:/usr/share/nginx/html/api/docs/                    # API docs.
      - back_static:/usr/share/nginx/html/api/static/               # API static.
      - back_media:/usr/share/nginx/html/api/media/                 # API media.
    depends_on:
      - backend
    networks:
      - default